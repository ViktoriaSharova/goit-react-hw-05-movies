{"version":3,"file":"static/js/861.51b77c3f.chunk.js","mappings":"kNAGaA,EAAaC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4BAItBC,EAAiBH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iEAM1BG,GAAaL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAYO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,qD,SCVzBM,EAAY,SAAHC,GAAoB,IAAdC,EAAMD,EAANC,OACpBC,GAAWC,EAAAA,EAAAA,MACjB,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACd,EAAU,CAAAgB,SACRL,EAAOM,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAcF,EAAdE,eAAc,OAC/BN,EAAAA,EAAAA,KAACV,EAAc,CAAAY,UACbF,EAAAA,EAAAA,KAACR,EAAU,CAACe,GAAE,WAAAC,OAAaH,GAAMI,MAAO,CAAEC,KAAMZ,GAAWI,SACxDI,KAFgBD,EAIJ,OAK3B,C,sJChBaM,EAAO,SAAHf,GAA6B,IAAvBgB,EAAehB,EAAfgB,gBACrBC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAatB,OACEI,EAAAA,EAAAA,MAAA,QAAMC,SAZS,SAAAC,GACfA,EAAMC,iBAENV,EAAgB,CAAEK,MAAAA,IAClBI,EAAME,cAAcC,OACtB,EAO2BtB,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SACEyB,KAAK,OACLC,KAAK,SACLC,aAAa,MACbC,WAAS,EACTC,SAXkB,SAAHzB,GAA+B,IAAf0B,EAAK1B,EAAf2B,OAAUD,MACnCZ,EAASY,EACX,EAUME,YAAY,mBAEdhC,EAAAA,EAAAA,KAAA,UAAQyB,KAAK,SAASQ,UAAWhB,EAAMf,SAAC,aAK9C,ECzBe,SAASgC,IACtB,IAAArB,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjChB,EAAMkB,EAAA,GAAEoB,EAASpB,EAAA,GACxBqB,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAtB,EAAAA,EAAAA,GAAAoB,EAAA,GAAlDG,EAAYD,EAAA,GAAE1B,EAAe0B,EAAA,GAgBpC,OAdAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAeF,EAAaG,IAAI,SAId,SAAAC,IAKvB,OALuBA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAxB,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEgCC,EAAAA,EAAAA,IAAgBV,GAAc,KAAD,EAAnDM,EAAaC,EAAAI,KACnBjB,EAAUY,GAAeC,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,iCAAAA,EAAAM,OAAA,GAAAR,EAAA,mBAE5BS,MAAA,KAAAC,UAAA,CARIf,GAEJ,WACuBE,EAAAY,MAAC,KAADC,UAAA,CAMxBC,EACF,GAAG,CAAClB,KAGFpB,EAAAA,EAAAA,MAAAlB,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACW,EAAI,CAACC,gBAAiBA,IACtBf,EAAO6D,OAAS,IAAK1D,EAAAA,EAAAA,KAACL,EAAAA,EAAS,CAACE,OAAQA,MAG/C,C","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.js","components/Form/Form.js","pages/MoviesPage/MoviesPage.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nexport const MoviesList = styled.ul`\n  padding: 10px;\n`;\n\nexport const MoviesListItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const MoviesLink = styled(Link)`\n  color: black;\n  text-decoration: none;\n`;","import { useLocation } from 'react-router-dom';\nimport { MoviesList, MoviesListItem, MoviesLink } from './MovieList.styled';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <MoviesList>\n        {movies.map(({ id, original_title }) => (\n          <MoviesListItem key={id}>\n            <MoviesLink to={`/movies/${id}`} state={{ from: location }}>\n              {original_title}\n            </MoviesLink>\n          </MoviesListItem>\n        ))}\n      </MoviesList>\n    </>\n  );\n};","import { useState } from 'react';\n\nexport const Form = ({ setsearchParams }) => {\n  const [query, setQuery] = useState('');\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    setsearchParams({ query });\n    event.currentTarget.reset();\n  };\n\n  const getSearchParams = ({ target: { value } }) => {\n    setQuery(value);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        name=\"search\"\n        autoComplete=\"off\"\n        autoFocus\n        onChange={getSearchParams}\n        placeholder=\"Search movies\"\n      />\n      <button type=\"submit\" disabled={!query}>\n        Search\n      </button>\n    </form>\n  );\n};","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByQuery } from '../../components/API/API';\nimport { MovieList } from '../../components/MovieList/MovieList';\nimport { Form } from '../../components/Form/Form';\n\nexport default function MoviesPage() {\n  const [movies, setmovies] = useState([]);\n  const [searchParams, setsearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const currentQuery = searchParams.get('query');\n    if (!currentQuery) {\n      return;\n    }\n    async function getMovies() {\n      try {\n        const fetchedMovies = await getMovieByQuery(currentQuery);\n        setmovies(fetchedMovies);\n      } catch (error) {}\n    }\n    getMovies();\n  }, [searchParams]);\n\n  return (\n    <>\n      <Form setsearchParams={setsearchParams} />\n      {movies.length > 0 && <MovieList movies={movies} />}\n    </>\n  );\n}"],"names":["MoviesList","styled","_templateObject","_taggedTemplateLiteral","MoviesListItem","_templateObject2","MoviesLink","Link","_templateObject3","MovieList","_ref","movies","location","useLocation","_jsx","_Fragment","children","map","_ref2","id","original_title","to","concat","state","from","Form","setsearchParams","_useState","useState","_useState2","_slicedToArray","query","setQuery","_jsxs","onSubmit","event","preventDefault","currentTarget","reset","type","name","autoComplete","autoFocus","onChange","value","target","placeholder","disabled","MoviesPage","setmovies","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","useEffect","currentQuery","get","_getMovies","_asyncToGenerator","_regeneratorRuntime","_callee","fetchedMovies","_context","prev","next","getMovieByQuery","sent","t0","stop","apply","arguments","getMovies","length"],"sourceRoot":""}